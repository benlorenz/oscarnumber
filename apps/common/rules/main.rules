#  Copyright (c) 1997-2022
#  Ewgenij Gawrilow, Michael Joswig, and the polymake team
#  Technische UniversitÃ¤t Berlin, Germany
#  https://polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

# @category Basic Types
# This wraps an arbitrary julia type using a `jl_value_t` pointer, and 
# uses a polymake [[Rational]] as a fallback implementation to allow
# constructions like `unit_matrix` without access to a concrete element or
# the julia parent object.
#
declare property_type JuliaFieldElement : upgrades(Rational) : c++ (include => "polymake/common/JuliaFieldElement.h", name=>"polymake::common::JuliaFieldElement") {

   # Construct from rational
   # @param Rational r
   method construct(type_upgrades_to<Rational>) : c++;

   operator ! neg : c++;

   operator @arith (*, *:num) : c++;

   operator @compare : c++;

   function abs(*) : operator abs : c++;

   method compare(*) : operator <=> : c++ (name => "cmp");
   
   use overload '0+' => \&inhibited_num;
}

function is_ordered_field_with_unlimited_precision(JuliaFieldElement) { 1 }


